// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 SJ Full Version"

// DATE "10/03/2016 19:04:58"

// 
// Device: Altera EP4CE6F17C8 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module DECODE_24 (
	data_in,
	data_out);
input 	[1:0] data_in;
output 	[3:0] data_out;

// Design Ports Information
// data_out[0]	=>  Location: PIN_G15,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 8mA
// data_out[1]	=>  Location: PIN_F16,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 8mA
// data_out[2]	=>  Location: PIN_F15,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 8mA
// data_out[3]	=>  Location: PIN_D16,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: 8mA
// data_in[0]	=>  Location: PIN_E15,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: Default
// data_in[1]	=>  Location: PIN_E16,	 I/O Standard: 3.3-V LVTTL,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("DECODE_24_v.sdo");
// synopsys translate_on

wire \data_out[0]~output_o ;
wire \data_out[1]~output_o ;
wire \data_out[2]~output_o ;
wire \data_out[3]~output_o ;
wire \data_in[0]~input_o ;
wire \data_in[1]~input_o ;
wire \Decoder0~0_combout ;
wire \Decoder0~1_combout ;
wire \Decoder0~2_combout ;
wire \Decoder0~3_combout ;


// Location: IOOBUF_X34_Y17_N16
cycloneive_io_obuf \data_out[0]~output (
	.i(\Decoder0~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\data_out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \data_out[0]~output .bus_hold = "false";
defparam \data_out[0]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X34_Y18_N23
cycloneive_io_obuf \data_out[1]~output (
	.i(\Decoder0~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\data_out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \data_out[1]~output .bus_hold = "false";
defparam \data_out[1]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X34_Y18_N16
cycloneive_io_obuf \data_out[2]~output (
	.i(\Decoder0~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\data_out[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \data_out[2]~output .bus_hold = "false";
defparam \data_out[2]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X34_Y19_N9
cycloneive_io_obuf \data_out[3]~output (
	.i(!\Decoder0~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\data_out[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \data_out[3]~output .bus_hold = "false";
defparam \data_out[3]~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X34_Y12_N1
cycloneive_io_ibuf \data_in[0]~input (
	.i(data_in[0]),
	.ibar(gnd),
	.o(\data_in[0]~input_o ));
// synopsys translate_off
defparam \data_in[0]~input .bus_hold = "false";
defparam \data_in[0]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X34_Y12_N8
cycloneive_io_ibuf \data_in[1]~input (
	.i(data_in[1]),
	.ibar(gnd),
	.o(\data_in[1]~input_o ));
// synopsys translate_off
defparam \data_in[1]~input .bus_hold = "false";
defparam \data_in[1]~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X33_Y18_N8
cycloneive_lcell_comb \Decoder0~0 (
// Equation(s):
// \Decoder0~0_combout  = (\data_in[0]~input_o  & \data_in[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\data_in[0]~input_o ),
	.datad(\data_in[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~0_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~0 .lut_mask = 16'hF000;
defparam \Decoder0~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X33_Y18_N2
cycloneive_lcell_comb \Decoder0~1 (
// Equation(s):
// \Decoder0~1_combout  = (!\data_in[0]~input_o  & \data_in[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\data_in[0]~input_o ),
	.datad(\data_in[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~1_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~1 .lut_mask = 16'h0F00;
defparam \Decoder0~1 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X33_Y18_N4
cycloneive_lcell_comb \Decoder0~2 (
// Equation(s):
// \Decoder0~2_combout  = (\data_in[0]~input_o  & !\data_in[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\data_in[0]~input_o ),
	.datad(\data_in[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~2_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~2 .lut_mask = 16'h00F0;
defparam \Decoder0~2 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X33_Y18_N30
cycloneive_lcell_comb \Decoder0~3 (
// Equation(s):
// \Decoder0~3_combout  = (\data_in[0]~input_o ) # (\data_in[1]~input_o )

	.dataa(gnd),
	.datab(gnd),
	.datac(\data_in[0]~input_o ),
	.datad(\data_in[1]~input_o ),
	.cin(gnd),
	.combout(\Decoder0~3_combout ),
	.cout());
// synopsys translate_off
defparam \Decoder0~3 .lut_mask = 16'hFFF0;
defparam \Decoder0~3 .sum_lutc_input = "datac";
// synopsys translate_on

assign data_out[0] = \data_out[0]~output_o ;

assign data_out[1] = \data_out[1]~output_o ;

assign data_out[2] = \data_out[2]~output_o ;

assign data_out[3] = \data_out[3]~output_o ;

endmodule
