// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2016 22:42:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MyWatch_V1_0
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MyWatch_V1_0_vlg_sample_tst(
	CLOCK,
	KEY1,
	KEY2,
	KEY3,
	RESET,
	sampler_tx
);
input  CLOCK;
input  KEY1;
input  KEY2;
input  KEY3;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or KEY1 or KEY2 or KEY3 or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MyWatch_V1_0_vlg_check_tst (
	DIG,
	SEL,
	sampler_rx
);
input [7:0] DIG;
input [5:0] SEL;
input sampler_rx;

reg [7:0] DIG_expected;
reg [5:0] SEL_expected;

reg [7:0] DIG_prev;
reg [5:0] SEL_prev;

reg [7:0] DIG_expected_prev;
reg [5:0] SEL_expected_prev;

reg [7:0] last_DIG_exp;
reg [5:0] last_SEL_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DIG_prev = DIG;
	SEL_prev = SEL;
end

// update expected /o prevs

always @(trigger)
begin
	DIG_expected_prev = DIG_expected;
	SEL_expected_prev = SEL_expected;
end


// expected DIG[ 7 ]
initial
begin
	DIG_expected[7] = 1'bX;
end 
// expected DIG[ 6 ]
initial
begin
	DIG_expected[6] = 1'bX;
end 
// expected DIG[ 5 ]
initial
begin
	DIG_expected[5] = 1'bX;
end 
// expected DIG[ 4 ]
initial
begin
	DIG_expected[4] = 1'bX;
end 
// expected DIG[ 3 ]
initial
begin
	DIG_expected[3] = 1'bX;
end 
// expected DIG[ 2 ]
initial
begin
	DIG_expected[2] = 1'bX;
end 
// expected DIG[ 1 ]
initial
begin
	DIG_expected[1] = 1'bX;
end 
// expected DIG[ 0 ]
initial
begin
	DIG_expected[0] = 1'bX;
end 
// expected SEL[ 5 ]
initial
begin
	SEL_expected[5] = 1'bX;
end 
// expected SEL[ 4 ]
initial
begin
	SEL_expected[4] = 1'bX;
end 
// expected SEL[ 3 ]
initial
begin
	SEL_expected[3] = 1'bX;
end 
// expected SEL[ 2 ]
initial
begin
	SEL_expected[2] = 1'bX;
end 
// expected SEL[ 1 ]
initial
begin
	SEL_expected[1] = 1'bX;
end 
// expected SEL[ 0 ]
initial
begin
	SEL_expected[0] = 1'bX;
end 
// generate trigger
always @(DIG_expected or DIG or SEL_expected or SEL)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DIG = %b | expected SEL = %b | ",DIG_expected_prev,SEL_expected_prev);
	$display("| real DIG = %b | real SEL = %b | ",DIG_prev,SEL_prev);
`endif
	if (
		( DIG_expected_prev[0] !== 1'bx ) && ( DIG_prev[0] !== DIG_expected_prev[0] )
		&& ((DIG_expected_prev[0] !== last_DIG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[0] = DIG_expected_prev[0];
	end
	if (
		( DIG_expected_prev[1] !== 1'bx ) && ( DIG_prev[1] !== DIG_expected_prev[1] )
		&& ((DIG_expected_prev[1] !== last_DIG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[1] = DIG_expected_prev[1];
	end
	if (
		( DIG_expected_prev[2] !== 1'bx ) && ( DIG_prev[2] !== DIG_expected_prev[2] )
		&& ((DIG_expected_prev[2] !== last_DIG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[2] = DIG_expected_prev[2];
	end
	if (
		( DIG_expected_prev[3] !== 1'bx ) && ( DIG_prev[3] !== DIG_expected_prev[3] )
		&& ((DIG_expected_prev[3] !== last_DIG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[3] = DIG_expected_prev[3];
	end
	if (
		( DIG_expected_prev[4] !== 1'bx ) && ( DIG_prev[4] !== DIG_expected_prev[4] )
		&& ((DIG_expected_prev[4] !== last_DIG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[4] = DIG_expected_prev[4];
	end
	if (
		( DIG_expected_prev[5] !== 1'bx ) && ( DIG_prev[5] !== DIG_expected_prev[5] )
		&& ((DIG_expected_prev[5] !== last_DIG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[5] = DIG_expected_prev[5];
	end
	if (
		( DIG_expected_prev[6] !== 1'bx ) && ( DIG_prev[6] !== DIG_expected_prev[6] )
		&& ((DIG_expected_prev[6] !== last_DIG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[6] = DIG_expected_prev[6];
	end
	if (
		( DIG_expected_prev[7] !== 1'bx ) && ( DIG_prev[7] !== DIG_expected_prev[7] )
		&& ((DIG_expected_prev[7] !== last_DIG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG_expected_prev);
		$display ("     Real value = %b", DIG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG_exp[7] = DIG_expected_prev[7];
	end
	if (
		( SEL_expected_prev[0] !== 1'bx ) && ( SEL_prev[0] !== SEL_expected_prev[0] )
		&& ((SEL_expected_prev[0] !== last_SEL_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[0] = SEL_expected_prev[0];
	end
	if (
		( SEL_expected_prev[1] !== 1'bx ) && ( SEL_prev[1] !== SEL_expected_prev[1] )
		&& ((SEL_expected_prev[1] !== last_SEL_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[1] = SEL_expected_prev[1];
	end
	if (
		( SEL_expected_prev[2] !== 1'bx ) && ( SEL_prev[2] !== SEL_expected_prev[2] )
		&& ((SEL_expected_prev[2] !== last_SEL_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[2] = SEL_expected_prev[2];
	end
	if (
		( SEL_expected_prev[3] !== 1'bx ) && ( SEL_prev[3] !== SEL_expected_prev[3] )
		&& ((SEL_expected_prev[3] !== last_SEL_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[3] = SEL_expected_prev[3];
	end
	if (
		( SEL_expected_prev[4] !== 1'bx ) && ( SEL_prev[4] !== SEL_expected_prev[4] )
		&& ((SEL_expected_prev[4] !== last_SEL_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[4] = SEL_expected_prev[4];
	end
	if (
		( SEL_expected_prev[5] !== 1'bx ) && ( SEL_prev[5] !== SEL_expected_prev[5] )
		&& ((SEL_expected_prev[5] !== last_SEL_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEL[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEL_expected_prev);
		$display ("     Real value = %b", SEL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEL_exp[5] = SEL_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#50000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module MyWatch_V1_0_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg KEY1;
reg KEY2;
reg KEY3;
reg RESET;
// wires                                               
wire [7:0] DIG;
wire [5:0] SEL;

wire sampler;                             

// assign statements (if any)                          
MyWatch_V1_0 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.DIG(DIG),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.RESET(RESET),
	.SEL(SEL)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #500 1'b1;
	#500;
end 

// KEY1
initial
begin
	KEY1 = 1'b0;
end 

// KEY2
initial
begin
	KEY2 = 1'b0;
end 

// KEY3
initial
begin
	KEY3 = 1'b0;
end 

// RESET
initial
begin
	RESET = 1'b1;
end 

MyWatch_V1_0_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.KEY1(KEY1),
	.KEY2(KEY2),
	.KEY3(KEY3),
	.RESET(RESET),
	.sampler_tx(sampler)
);

MyWatch_V1_0_vlg_check_tst tb_out(
	.DIG(DIG),
	.SEL(SEL),
	.sampler_rx(sampler)
);
endmodule

